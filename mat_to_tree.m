function [ltree, dtree, tagtree] = mat_to_tree(newTreeNum,length, Z )
%convert matrix generated by linkage to tree
    ltree=tree(length);
    dtree=tree(0);
    tagtree=tree;
    
    DataNum=size(Z,1)+1;
    %Size of Data
    
   
    childTreeNum1=Z(newTreeNum-DataNum,1);
    childTreeNum2=Z(newTreeNum-DataNum,2);
    if childTreeNum1<=DataNum
        %return when the new node is leaf
        %new node is leaf when the index is smaller than the size of data
        ltree=ltree.addnode(1,Z(newTreeNum-DataNum,3)/2);
        
        %use num2str
        dtree=dtree.addnode(1, childTreeNum1);
        
        tagtree=tagtree.addnode(1, mat2str(childTreeNum1));
    else 
        [child_ltree, child_dtree, child_tagtree]=mat_to_tree(childTreeNum1,Z(newTreeNum-DataNum,3)/2-Z(childTreeNum1-DataNum,3)/2,Z);
        ltree=ltree.graft(1,child_ltree);
        dtree=dtree.graft(1,child_dtree);
        tagtree=tagtree.graft(1,child_tagtree);
       
        
    end
    if childTreeNum2<=DataNum
        %return when the new node is leaf
        %new node is leaf when the index is smaller than the size of data
        ltree=ltree.addnode(1,Z(newTreeNum-DataNum,3)/2);
        dtree=dtree.addnode(1,childTreeNum2);
        tagtree=tagtree.addnode(1, mat2str(childTreeNum2));

    else
        [child_ltree, child_dtree,child_tagtree]=mat_to_tree(childTreeNum2,Z(newTreeNum-DataNum,3)/2-Z(childTreeNum2-DataNum,3)/2,Z);
        ltree=ltree.graft(1,child_ltree);
        dtree=dtree.graft(1,child_dtree);
        tagtree=tagtree.graft(1,child_tagtree);
    end            
  
end

